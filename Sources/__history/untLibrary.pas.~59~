unit untLibrary;
{
############################################################################
# Inclusão ...... :
#  Autor   : Rogério Teixeira
#  Data    : 24.03.2015
#  Motivo  : Geração de Library (Class, Records)
############################################################################
# Manutenção ...... :
#  Usuario :
#  Data    :
#  Motivo  :
#  Ref.    :
############################################################################
}
interface
  uses SysUtils, Forms, Windows, Classes, iphlpapi, IpTypes, Winsock, sPageControl,
       IdComponent, IdIPWatch, mmsystem, StrUtils, Menus, sComboBox, Vcl.ActnList, Dialogs;

Type  // Record´s
  TAppStatus = record
    bPodeFechar: Boolean;
    bLogado: Boolean;
    bAtendido: Boolean;
    bSainte: Boolean;
    sTipoChamada: String;
    sTipoEvento: String;
    sNumero: String;

    dtvInicioChamada: TDateTime;
    dtvFimChamada: TDateTime;
    dtvInicioPausa: TDateTime;

    tTempoHoldTotal: TTime;
    tTempoHoldIni: TTime;
    tTempoHoldFim: TTime;

    sSipDialID: String;
    sSipDialStatus: String;
    sTipoDesconexao: String;

    nCallQuality: Integer;
  end;

  TInfoLogin = record
    sNome                     : String;
    sUsuario                  : String;
    sEMail                    : String;
    sRamal                    : String;
    sIDUsuario                : String;
    sSenha                    : String;
    sIPPABX                   : String;
    sIDOperacao               : String;
    sIDEmpresa                : String;
    bConferencia              : Boolean;
    sIDSupervisor             : String;
    nTipo                     : Integer;
    sQualidadePLogin          : String;
    sPerfil                   : String;
    bRotaInteligente          : Boolean;
    nIdRotaInteligente        : Integer;
    nChatSalasQtd             : Integer;
    //Utilizado no integrador
    sCodigoExterno            : String;
    //Recupera dialpad
    bDialPad                  : Boolean;
    bFone_registro_act        : Boolean;
    sSec_fone_registro_tmp    : String;
    iEasy_work_equipe_conf_id : Integer;
    //Data/Hora BD
    sDataLogin                : String;
    sHoraLogin                : String;
    //Qualidade da Chamada
    bQualidadeChamada         : Boolean;
  end;

  TVaxIncomingCallParams = record
    bAutoAnswer: Boolean;
    bIncomingCall: Boolean;
    CallId: WideString;
    DisplayName: WideString;
    UserName: WideString;
    FromURI: WideString;
    ToURI: WideString;

    sProtocolo: String;
    sTipoOperacao: String;
    sTipoLigacao: String;
    sUniqueID: String;
    sFila: String;
    sFilaDSC: String;
    sCodTipo: String;
    sNomeLoja: String;
    sCampo: array[1..10] of String;

    //Audio parameters
    bSetAudioFromDB: Boolean;
    SetSpkVolume: Integer;
    SetMicVolume: Integer;

    //AudioRing Info
    sRingFile: String;
    nTotalDevices: Integer;
    nCurrentDevice: Integer;

    //Record
    bRecord: Boolean;
  end;

  TPausa = record
    bPausado       : Boolean;
    bDiscouPausa   : Boolean;
    bAtivoPausa    : Boolean;
    bTrocandoPausa : Boolean;
    bTravaRestricao: Boolean;
    bLastCallRedial: Boolean;

    sIDPausa       : String;
    sPausaTipo     : String;
    nPausaDurMinAct: Integer;
    tPausaDurMinVal: TTime;
    tTempoPausa    : TTime;
  end;

  TFaqClass = record
    bFaqAct: Boolean;
    nFaqIdConf: Integer;

    nQtdGrupoConf: Integer;
    matrizGrupoConf: array of array of string;

    nQtdRespostaConf: Integer;
    matrizRespostaConf: array of array of string;
  end;

  TConfCallClass = record
    bInConfCall: Boolean;
    bExterno: Boolean;
    sNum2Dial: String;
    nQtdConfCall: Integer;
    matrizConfCall: array of array of string;

    nQtdIntConfCall: Integer;
    matrizIntConfCall: array of array of string;

    nQtdExtConfCall: Integer;
    matrizExtConfCall: array of array of string;
  end;

  TConsultaCallClass = record
    bInConsCall  : Boolean;
    sLastAppState: String;
    nLastDest    : Integer;
  end;

  TAtxferCallClass = record
    bInAtxferCall: Boolean;
    nLastDest    : Integer;
    sLastState   : String;
  end;

  TClassificacao = record
    bAuto: Boolean;
    bClassificou: Boolean;
    bClassificando: Boolean;

    bAutoAgendouPausa: Boolean;
    sAutoAgendouPausaTipo: String;
    nAutoAgendouPausaIndex: Integer;
  end;

  TCoaching = record
    bCoaching: Boolean;
    sIdCoaching: String;
    nCboCoachingIndex: Integer;
  end;

  TXFer = record
    bXFerExec: Boolean;
    sXFerTipo: String;
    sXFerDest: String;
  end;

  TChat = record
    nChatAtivo: Integer;
    sDirBlobReceived: String;
    bAutoClassificacao: Boolean;
  end;

  TCaptureScreen = record
    bCapture: Boolean;
    bCapturing: Boolean;
    nCaptureMode: Integer;
    bCaptureAudio: Boolean;
    bCaptureCursor: Boolean;
    //sCapturePort: String;
    nSplitInterval: Integer;
    nSplitStep: Integer;
    sCaptureStorageSrc: String;
    sCaptureStorageFile: String;
    sCaptureFileFormat: String;
    sCaptureStorageDst: String;
    nThreadsRunning: Integer;

    //sCaptureCurrentDirRec: String;
    //sCaptureCurrentFileRec: String;
  end;

Type // Class

  TProcesso = Class
  private
  public
    Procedure Conferencia;
  End;


  TSQL = Class
  private
    FChatFilaIn : String;
    FsRespChatIn: String;
    FsVNumPausa: Integer;
    procedure SetChatFilaIn(const Value: String);
    procedure SetsRespChatIn(const Value: String);
    procedure SetsVNumPausa(const Value: Integer);
  ///
  public
    procedure CarregaFila;
    procedure CarregaFilaTransferencia;
    function CarregaChatConf : String;
    procedure CarregaChatSala;
    procedure CarregaChatTrans(mitChatXFer: TMenuItem; mnuChatMoreOptions: TPopupMenu; OnClick : TNotifyEvent );
    procedure CarregaChatResp(cboChatGroup: TsComboBox);
    procedure CarregaChatRespGrupo;
    procedure CarregaClassFila;
    procedure CarregaClassFilaSub;
    procedure CarregaPausa;
    procedure CarregaCoaching;
    procedure CarregaLoja;
    procedure CarregaXFerURA;
    procedure CarregaXFerRamal;
    procedure CarregaXFerPesquisa;
    procedure CarregaXFerVirtual;
    procedure CarregaXFerConsulta;
    procedure CarregaOperHasParam;
    procedure CarregaSites(albrowser: TActionList; tabCliente: TsTabSheet);
    procedure CarregaIntegrador;
    procedure CarregaFacGrupoConf;
    procedure CarregaFaqRespConf;

    property sChatFilaIn  : String read FChatFilaIn write SetChatFilaIn;
    property sRespChatIn  : String read FsRespChatIn write SetsRespChatIn;
    property sVNumPausa  : Integer read FsVNumPausa write SetsVNumPausa;

  End;

  TAgente = Class
    SQL             : TSQL;
    Processo        : TProcesso;
  private
    function GetPathArqConf: string;
    function GetTotalAudio: Integer;
    function GetTotalMicrofone: Integer;
    function GetWinSYS_OPER: string;
    function GetWinUSER: string;
    function GetWinMOTHERBOARD: string;
    function GetWinPC_NAME: string;
    function GetWinMAC_ADDRES01: string;
    function GetWinMAC_ADDRES02: string;
    function GetListaAudios: TStringList;
    function GetListaMics: TStringList;
    function GetwinIP: string;
    function GetPathArqTxtSQL: string;

  public
    property PathArqConf     : string read GetPathArqConf;
    property PathArqTxtSQL   : string read GetPathArqTxtSQL;
    property TotalMicrofone  : Integer read GetTotalMicrofone;
    property TotalAudio      : Integer read GetTotalAudio;
    property ListaAudios     : TStringList read GetListaAudios;
    property ListaMics       : TStringList read GetListaMics;
    property WinUSER         : string read GetWinUSER;
    property WinPC_NAME      : string read GetWinPC_NAME;
    property WinMAC_ADDRES01 : string read GetWinMAC_ADDRES01;
    property WinMAC_ADDRES02 : string read GetWinMAC_ADDRES02;
    property WinSYS_OPER     : string read GetWinSYS_OPER;
    property WinMOTHERBOARD  : string read GetWinMOTHERBOARD;
    property WinIP           : string read GetWinIP;

  published
    constructor Create; overload;
    Destructor  Destroy; override;
  end;



  TUserFila = Class
  private
    Feasy_work_equipe_conf_id: Integer;
    Ffone_transferencia_act: char;
    Fchat_atendimento_act: char;
    Fpenalty: Integer;
    Frecuperar_gravacao_act: char;
    Fxcrm_atendimento_act: char;
    Fmail_atendimento_act: char;
    Fid: Integer;
    Fchat_transferencia_act: char;
    Fvcrm_atendimento_act: char;
    Ffone_atendimento_act: char;
    Factive: char;
    Fmail_transferencia_act: char;
    Feasy_pabx_serv_fila_universal_ctr_id: Integer;
    procedure Setactive(const Value: char);
    procedure Setchat_atendimento_act(const Value: char);
    procedure Setchat_transferencia_act(const Value: char);
    procedure Seteasy_pabx_serv_fila_universal_ctr_id(const Value: Integer);
    procedure Seteasy_work_equipe_conf_id(const Value: Integer);
    procedure Setfone_atendimento_act(const Value: char);
    procedure Setfone_transferencia_act(const Value: char);
    procedure Setid(const Value: Integer);
    procedure Setmail_atendimento_act(const Value: char);
    procedure Setmail_transferencia_act(const Value: char);
    procedure Setpenalty(const Value: Integer);
    procedure Setrecuperar_gravacao_act(const Value: char);
    procedure Setvcrm_atendimento_act(const Value: char);
    procedure Setxcrm_atendimento_act(const Value: char);
  public
    property id  : Integer read Fid write Setid;
    property active  : char read Factive write Setactive;
    property penalty  : Integer read Fpenalty write Setpenalty;
    property fone_atendimento_act  : char read Ffone_atendimento_act write Setfone_atendimento_act;
    property fone_transferencia_act  : char read Ffone_transferencia_act write Setfone_transferencia_act;
    property chat_transferencia_act  : char read Fchat_transferencia_act write Setchat_transferencia_act;
    property chat_atendimento_act  : char read Fchat_atendimento_act write Setchat_atendimento_act;
    property mail_atendimento_act  : char read Fmail_atendimento_act write Setmail_atendimento_act;
    property mail_transferencia_act  : char read Fmail_transferencia_act write Setmail_transferencia_act;
    property recuperar_gravacao_act  : char read Frecuperar_gravacao_act write Setrecuperar_gravacao_act;
    property xcrm_atendimento_act  : char read Fxcrm_atendimento_act write Setxcrm_atendimento_act;
    property vcrm_atendimento_act  : char read Fvcrm_atendimento_act write Setvcrm_atendimento_act;
    property easy_work_equipe_conf_id  : Integer read Feasy_work_equipe_conf_id write Seteasy_work_equipe_conf_id;
    property easy_pabx_serv_fila_universal_ctr_id  : Integer read Feasy_pabx_serv_fila_universal_ctr_id write Seteasy_pabx_serv_fila_universal_ctr_id;
  End;

  // Classe de Conf.ini
  TConfiguracoes = Class
  private
    function Getcmd01: string;
    function Getcmd02: string;
    function Getcmd03: string;
    function Getcmd04: string;
    function Getcmd05: string;
  public
    property cmd01: string read Getcmd01;
    property cmd02: string read Getcmd02;
    property cmd03: string read Getcmd03;
    property cmd04: string read Getcmd04;
    property cmd05: string read Getcmd05;
  End;

// Classe de Devices Agente.dll
  TDevice=class(TPersistent)
  private
    FIP   : WideString;
    FMask : WideString;
  public
    property IP  : WideString read FIP write FIP;
    property MASK: WideString read FMASK write FMASK;
  end;


  Var Configuracao            : TConfiguracoes;  // Conf.ini
      Agente                  : TAgente;         // HosannaAgente
      TMyInfoLogin            : TInfoLogin;
      TMyAppStatus            : TAppStatus;
      TMyVaxIncomingCallParam : TVaxIncomingCallParams;
      TMyConfCallClass        : TConfCallClass;
      TMyConsultaCallClass    : TConsultaCallClass;
      TMyAtxferCallClass      : TAtxferCallClass;
      TMyClassificacao        : TClassificacao;
      TMyCoaching             : TCoaching;
      TMyXFer                 : TXFer;
      TMyChat                 : TChat;
      TMyCaptureScreen        : TCaptureScreen;
      TMyPausa                : TPausa;
      TMyFaqClass             : TFaqClass;
      UserFile                : array of TUserFila;



      //Arrays
      matrizpausa             : array of array of string;
      matrizcoaching          : array of array of string;
      matriz_fila             : array of array of string;
      matrizclassifica_fila   : array of array of string;
      matrizclassificasub_fila: array of array of string;
      matrizloja              : array of array of string;
      matrizxferfila          : array of array of string;
      matrizxferura           : array of array of string;
      matrizxferramal         : array of array of string;
      matrizxferpesquisa      : array of array of string;
      matrizxfervirtual       : array of array of string;
      matrizxferconsulta      : array of array of string;
      matrizparametros        : array of string;
      matrizurl               : array of array of string;
      vintegrador             : array [0..3] of string;
      vintegradorParams       : array [0..39] of string;
      vchat                   : array [0..3] of string;
      matrizchatassunto       : array of array of string;
      matrizchatresposta      : array of array of string;
      matrizchatrespostagrupo : array of array of string;
      matrizchatclassifica    : array of array of string;
      matrizchatclassificasub : array of array of string;
      matrizcentrocusto       : array of array of string;
      matrizdialednums        : array [0..9] of string;
      matrizemails            : array of array of string;



Const
  CnstNameArqConf = 'Config.INI';

implementation
  uses untFuncoes, untdm, untPrincipal, untTranslate;


{ TConfiguracoes }
function TConfiguracoes.Getcmd01: string;
begin
  Result := FncLeINI(Agente.PathArqConf,'COMANDOS','CMD01');
end;

function TConfiguracoes.Getcmd02: string;
begin
  Result := FncLeINI(Agente.PathArqConf,'COMANDOS','CMD02');
end;

function TConfiguracoes.Getcmd03: string;
begin
  Result := FncLeINI(Agente.PathArqConf,'COMANDOS','CMD03');
end;

function TConfiguracoes.Getcmd04: string;
begin
  Result := FncLeINI(Agente.PathArqConf,'COMANDOS','CMD04');
end;

function TConfiguracoes.Getcmd05: string;
begin
  Result := FncLeINI(Agente.PathArqConf,'COMANDOS','CMD05');
end;

{ TAgente }
function TAgente.GetTotalAudio: Integer;
begin
//  result := WaveOutGetNumDevs > 0;
  result := WaveOutGetNumDevs;
end;

function TAgente.GetTotalMicrofone: integer;
begin
//  result := waveInGetNumDevs > 0;
  result := waveInGetNumDevs;
end;

function TAgente.GetwinIP: string;
var
  IPWatch : TIdIPWatch;
begin
 IPWatch := TIdIPWatch.Create(nil);
 Result := IPWatch.LocalIP;
 FreeAndNil(IPWatch);
end;

constructor TAgente.Create;
begin
  if Not Assigned(Self.SQL)      then Self.SQL      := TSQL.Create;
  if Not Assigned(Self.Processo) then Self.Processo := TProcesso.Create;
end;

destructor TAgente.Destroy;
begin
  if Assigned(Self.SQL)      then FreeAndNil(Self.SQL);
  if Assigned(Self.Processo) then FreeAndNil(Self.Processo);

  inherited;
end;

function TAgente.GetListaAudios: TStringList;
  var StrResultado : TStringList;
begin
{  StrResultado := TStringList.Create;
  if Assigned(StrResultado) then
    StrResultado := FncRetornaAudio('DirectSound:');
  Result := StrResultado;}

  Result := TStringList.Create;

  if Assigned(Result) then
    PrcRetornaAudioOUT(Result);

  if Result.Count <= 0 then
    Result.Add('Dispositivo desconhecido.');

end;

function TAgente.GetListaMics: TStringList;
begin
  Result := TStringList.Create;

  if Assigned(Result) then
    PrcRetornaAudioIN(Result);

  if Result.Count <= 0 then
    Result.Add('Dispositivo desconhecido.');
end;

function TAgente.GetPathArqConf: string;
begin
  Result := IncludeTrailingBackslash(ExtractFilePath(Application.ExeName))+CnstNameArqConf;
end;

function TAgente.GetPathArqTxtSQL: string;
begin
  Result:= IncludeTrailingBackslash(ExtractFilePath(Application.ExeName))+'Txt';
end;

function TAgente.GetWinMAC_ADDRES01: string;
{var pAdapterInfo:PIP_ADAPTER_INFO;
    BufLen,Status:cardinal; i:Integer;}
begin
{  result:='';
  BufLen:= sizeof(IP_ADAPTER_INFO);
  GetAdaptersInfo(nil, BufLen);
  pAdapterInfo:= AllocMem(BufLen);
  try
    Status:= GetAdaptersInfo(pAdapterInfo,BufLen);
    if (Status <> ERROR_SUCCESS) then
    begin
      case Status of
        ERROR_NOT_SUPPORTED: raise exception.create('O(s) Adaptador(es)("MAC Address") deste computador não são/é suportado pelo sistema operacional em execução.');
        ERROR_NO_DATA: raise exception.create('Nenhum adaptador de rede no computador.');
      else
        raiselastOSerror;
      end;
      Exit;
    end;
    while (pAdapterInfo^.AddressLength=0) and (pAdapterInfo^.next<>nil) do
     pAdapterInfo:=pAdapterInfo.next;
    if pAdapterInfo^.AddressLength>0 then
    for i := 0 to pAdapterInfo^.AddressLength - 1 do
      result := result + IntToHex(pAdapterInfo^.Address[I], 2);
  finally
    Freemem(pAdapterInfo);
  end;}
end;

function TAgente.GetWinMAC_ADDRES02: string;
var
  ID1, ID2: TGUID;
  apiFunc: Function(GUID: PGUID): Longint; stdcall;
  dll:cardinal;
begin
  Result := '';
  dll := LoadLibrary('rpcrt4.dll');
  if dll <> 0 then
  begin
    @apiFunc := GetProcAddress(dll, 'UuidCreateSequential');
    if Assigned(apiFunc) then
    begin
      if (apiFunc(@ID1) = 0) and
      (apiFunc(@ID2) = 0) and
      (ID1.D4[2] = ID2.D4[2]) and
      (ID1.D4[3] = ID2.D4[3]) and
      (ID1.D4[4] = ID2.D4[4]) and
      (ID1.D4[5] = ID2.D4[5]) and
      (ID1.D4[6] = ID2.D4[6]) and
      (ID1.D4[7] = ID2.D4[7]) then
      begin
        Result :=
        IntToHex(ID1.D4[2], 2) +'.'+
        IntToHex(ID1.D4[3], 2) +'.'+
        IntToHex(ID1.D4[4], 2) +'.'+
        IntToHex(ID1.D4[5], 2) +'.'+
        IntToHex(ID1.D4[6], 2) +'.'+
        IntToHex(ID1.D4[7], 2);
      end;
    end;
  end;
end;

function TAgente.GetWinMOTHERBOARD: string;
var a, b, c, d: LongWord;
begin
  asm
    push EAX
    push EBX
    push ECX
    push EDX

    mov eax, 1
    db $0F, $A2
    mov a, EAX
    mov b, EBX
    mov c, ECX
    mov d, EDX
    pop EDX
    pop ECX
    pop EBX
    pop EAX
  end;
  result := inttohex(a, 8) +
            '-' + inttohex(b, 8) +
            '-' + inttohex(c, 8) +
            '-' + inttohex(d, 8);
end;

function TAgente.GetWinPC_NAME: string;
var
  PC: Pchar;
  Tamanho: Cardinal;
begin
  Result := '';
  Tamanho := 100;
  Getmem(PC, Tamanho);
  GetComputerName(PC, Tamanho);
  Result := PC;
  FreeMem(PC);
end;

function TAgente.GetWinSYS_OPER: string;
  Var SysOper : String;
begin
  SysOper := GetSOComputer01;
  if Length(Trim(SysOper)) <= 0 then
    SysOper := GetSOComputer02;
  Result := SysOper;
end;

function TAgente.GetWinUSER: string;
var
  BufSize: DWord;
  Buffer: PWideChar;
begin
 BufSize:= 1024;
 Buffer:= AllocMem(BufSize);
 try
  if GetUserName(Buffer, BufSize) then
      SetString(result, Buffer, BufSize)
 else
  RaiseLastOSError;
 finally
  FreeMem(Buffer);
 end;
end;

procedure TSQL.CarregaChatResp(cboChatGroup: TsComboBox);
begin

  with datam.qryChatCarregaResp do
  begin


    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;

    LogCallStep('log_login_act', 'carregaoperacao :: Step 10.7');

    cboChatGroup.Items.Clear;
    cboChatGroup.ItemIndex := -1;
    cboChatGroup.Text      := APP_FRM_MAIN_CHAT_SELECT_GROUP[ID_LANG];

    SetLength(matrizchatresposta,2,RecordCount);

    Agente.SQL.sRespChatIn := '';

    First;
    while not Eof do
    begin
      matrizchatresposta[0, RecNo-1] := Fields[0].AsString;
      matrizchatresposta[1, RecNo-1] := Fields[1].AsString;

      if not datam.qryChatCarregaResp.Bof then
        Agente.SQL.sRespChatIn := Agente.SQL.sRespChatIn + ',';
      Agente.SQL.sRespChatIn := Agente.SQL.sRespChatIn + matrizchatresposta[0, RecNo-1];

      cboChatGroup.Items.Add(matrizchatresposta[1, RecNo-1]);
      Next;
    end; //while not datam.qryChatCarregaResp.Eof do

    Close;
  end;


end;

procedure TSQL.CarregaChatRespGrupo;
begin

  with datam.qryChatCarregaRespGrupo do
  begin

    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;

    LogCallStep('log_login_act', 'carregaoperacao :: Step 10.9');

    SetLength(matrizchatrespostagrupo, 4, RecordCount);

    First;
    while not Eof do
    begin

      matrizchatrespostagrupo[0, RecNo-1] := Fields[0].AsString;
      matrizchatrespostagrupo[1, RecNo-1] := Fields[1].AsString;
      matrizchatrespostagrupo[2, RecNo-1] := Fields[2].AsString;
      matrizchatrespostagrupo[3, RecNo-1] := Fields[3].AsString;

      Next;
    end;

    Close;
  end;


end;

procedure TSQL.CarregaChatSala;
begin

  with datam.qryChatCarregaSala do
  begin

    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;

    LogCallStep('log_login_act', 'carregaoperacao :: Step 10.3');

    SetLength(matrizchatassunto,2,RecordCount);

    First;
    while not Eof do
    begin
      matrizchatassunto[0, RecNo-1] := Fields[0].AsString;//id
      matrizchatassunto[1, RecNo-1] := ConvertCharToFE(Fields[1].AsString);//descricao

      Next;
    end;

    Close;
  end;

end;

Function TSQL.CarregaChatConf : String;
  Var sChatFilaIn : String;
begin

  Result      := '';
  sChatFilaIn := '';

  with datam.qryChatCarregaConf do
  begin

    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;

    if datam.qryChatCarregaConf.RecordCount > 0 then
    begin

      LogCallStep('log_login_act', 'carregaoperacao :: Step 10.1');

      vchat[1] := '60';//desconexao_auto_tmp
      vchat[3] := '1';//wrapuptime

      First;
      while not Eof do
      begin
        vchat[0] := Fields[2].AsString;//desconexao_auto_act
        vchat[1] := IfThen(Fields[3].AsInteger > StrToInt(vchat[1]), Fields[3].AsString, vchat[1]);
        vchat[2] := Fields[4].AsString;//desconexao_msg_txt
        vchat[3] := IfThen(Fields[1].AsInteger > StrToInt(vchat[3]), Fields[1].AsString, vchat[3]);

        sChatFilaIn := sChatFilaIn + Fields[0].AsString;
        if RecNo-1 < RecordCount-1 then
          sChatFilaIn := sChatFilaIn + ',';

        Next;
      end;
      Result := sChatFilaIn;
    end;
    Close;
  end;

end;

procedure TSQL.CarregaFacGrupoConf;
begin

  with datam.qryFaqGrupoConf do
  begin
    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;
  //  vnumfila := RecordCount;
    TMyFaqClass.nQtdGrupoConf := datam.qryFaqGrupoConf.RecordCount;
    SetLength(TMyFaqClass.matrizGrupoConf, RecordCount, 2);

    if RecordCount > 0 then
    begin

      First;
      While not Eof do
      begin
        TMyFaqClass.matrizGrupoConf[RecNo-1, 0] := Fields[0].AsString;
        TMyFaqClass.matrizGrupoConf[RecNo-1, 1] := Fields[1].AsString;

        Next;
      end;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaFaqRespConf;
begin

  with datam.qryFaqRespConf do
  begin

    // Verifica se esta ativo e fecha se sim
    If Active then Close;
    Open;

    TMyFaqClass.nQtdRespostaConf := RecordCount;
    SetLength(TMyFaqClass.matrizRespostaConf, RecordCount, 4);

    if TMyFaqClass.nQtdRespostaConf > 0 then
    begin
      First;
      while not Eof do
      begin

        TMyFaqClass.matrizRespostaConf[RecNo-1, 0] := Fields[0].AsString;
        TMyFaqClass.matrizRespostaConf[RecNo-1, 1] := Fields[1].AsString;
        TMyFaqClass.matrizRespostaConf[RecNo-1, 2] := Fields[2].AsString;
        TMyFaqClass.matrizRespostaConf[RecNo-1, 3] := Fields[3].AsString;

        Next;
      end;
    end;

    Close;
  end;
end;

procedure TSQL.CarregaFila;
begin

  with datam.qryCarregaFilas do
  begin
    // Verifica se esta ativo e fecha se sim
    If Active then Close;

    Open;
  //  vnumfila := RecordCount;
    SetLength(matriz_fila,2,RecordCount);

    First;
    while not Eof do
    begin
      matriz_fila[0, RecNo-1] := Fields[0].AsString;
      matriz_fila[1, RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;

{ TUserFila }

procedure TUserFila.Setactive(const Value: char);
begin
  Factive := Value;
end;

procedure TUserFila.Setchat_atendimento_act(const Value: char);
begin
  Fchat_atendimento_act := Value;
end;

procedure TUserFila.Setchat_transferencia_act(const Value: char);
begin
  Fchat_transferencia_act := Value;
end;

procedure TUserFila.Seteasy_pabx_serv_fila_universal_ctr_id(
  const Value: Integer);
begin
  Feasy_pabx_serv_fila_universal_ctr_id := Value;
end;

procedure TUserFila.Seteasy_work_equipe_conf_id(const Value: Integer);
begin
  Feasy_work_equipe_conf_id := Value;
end;

procedure TUserFila.Setfone_atendimento_act(const Value: char);
begin
  Ffone_atendimento_act := Value;
end;

procedure TUserFila.Setfone_transferencia_act(const Value: char);
begin
  Ffone_transferencia_act := Value;
end;

procedure TUserFila.Setid(const Value: Integer);
begin
  Fid := Value;
end;

procedure TUserFila.Setmail_atendimento_act(const Value: char);
begin
  Fmail_atendimento_act := Value;
end;

procedure TUserFila.Setmail_transferencia_act(const Value: char);
begin
  Fmail_transferencia_act := Value;
end;

procedure TUserFila.Setpenalty(const Value: Integer);
begin
  Fpenalty := Value;
end;

procedure TUserFila.Setrecuperar_gravacao_act(const Value: char);
begin
  Frecuperar_gravacao_act := Value;
end;

procedure TUserFila.Setvcrm_atendimento_act(const Value: char);
begin
  Fvcrm_atendimento_act := Value;
end;

procedure TUserFila.Setxcrm_atendimento_act(const Value: char);
begin
  Fxcrm_atendimento_act := Value;
end;

procedure TSQL.CarregaFilaTransferencia;
begin
  with datam.qryCarregaXFerFila do
  begin
    if Active then Close;
    Open;

    setlength(matrizxferfila,2, RecordCount);


    First;
    while not Eof do
    begin
      matrizxferfila[0,RecNo-1] := Fields[0].AsString;
      matrizxferfila[1,RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;
end;

procedure TSQL.CarregaIntegrador;
  Var nForIntegrador : Integer;
begin

  with datam.qr_carrega_integrador do
  begin
    if Active then Close;
    Open;

    if RecordCount > 0 then
    begin
      vintegrador[0] := Fields[1].AsString; //Ativo
      vintegrador[1] := IntToStr(Fields[3].AsInteger - 1); //Tipo
      vintegrador[2] := Fields[4].AsString; //destino
      vintegrador[3] := Fields[5].AsString; //separador

      for nForIntegrador := 0 to 9 do
      begin
        vintegradorParams[nForIntegrador     ] := Fields[6 + nForIntegrador     ].AsString; //param x act
        vintegradorParams[nForIntegrador + 10] := Fields[6 + nForIntegrador + 10].AsString; //param x val
        vintegradorParams[nForIntegrador + 20] := Fields[6 + nForIntegrador + 20].AsString; //param x nome_act
        vintegradorParams[nForIntegrador + 30] := Fields[6 + nForIntegrador + 30].AsString; //param x nome_txt
      end;
    end
    else
    begin
      vintegrador[0] := 'False';
    end;


    Close;
  end;

end;

procedure TSQL.CarregaLoja;
begin

  with datam.qryCarregaLoja do
  begin
    if Active then Close;
    Open;

    setlength(matrizloja,2,RecordCount);

    First;
    while not Eof do
    begin
      matrizloja[0,RecNo-1] := Fields[0].AsString;
      matrizloja[1,RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaOperHasParam;
begin

  with datam.qry_operacao_has_parametros do
  begin
    if Active then Close;
    Open;

    setlength(matrizparametros, 19);

    matrizparametros[00] := Fields[00].AsString;
    matrizparametros[01] := Fields[01].AsString;

    //pausa pos atendimento
    matrizparametros[02] := Fields[02].AsString;
    matrizparametros[03] := Fields[03].AsString;
    matrizparametros[04] := Fields[04].AsString;
    matrizparametros[05] := Fields[05].AsString;
    matrizparametros[06] := Fields[06].AsString;

    //pausa login
    matrizparametros[07] := Fields[07].AsString;
    matrizparametros[08] := Fields[08].AsString;
    matrizparametros[09] := Fields[09].AsString;
    matrizparametros[10] := Fields[10].AsString;
    matrizparametros[11] := Fields[11].AsString;

    //tempos para notificacao de TMA
    matrizparametros[12] := Fields[12].AsString;//act
    matrizparametros[13] := Fields[13].AsString;//tmp1
    matrizparametros[14] := Fields[14].AsString;//msg1
    matrizparametros[15] := Fields[15].AsString;//tmp2
    matrizparametros[16] := Fields[16].AsString;//msg2
    matrizparametros[17] := Fields[17].AsString;//tmp3
    matrizparametros[18] := Fields[18].AsString;//msg3

    Close;
  end;


end;

procedure TSQL.CarregaPausa;
begin

  with datam.qr_carrega_pausa do
  begin
    if Active then Close;
    Open;

    setlength(matrizpausa,18,RecordCount);

    Agente.SQL.sVNumPausa := RecordCount;

    First;
    while not Eof do
    begin
      matrizpausa[0,RecNo-1] := Fields[0].AsString;   //id
      matrizpausa[1,RecNo-1] := Fields[1].AsString;   //descricao
      matrizpausa[2,RecNo-1] := Fields[2].AsString;   // tipo
      matrizpausa[3,RecNo-1] := Fields[8].AsString;   //oper ativo
      matrizpausa[4,RecNo-1] := Fields[9].AsString;   //transfer act
      matrizpausa[5,RecNo-1] := Fields[10].AsString;  //restritiva duracao act
      matrizpausa[6,RecNo-1] := Fields[11].AsString;  //restritiva duracao tempo
      matrizpausa[7,RecNo-1] := Fields[12].AsString;  // restritiva qtd act
      matrizpausa[8,RecNo-1] := Fields[13].AsString;  // restritiva qtd
      matrizpausa[9,RecNo-1] := Fields[14].AsString;  //pausa conf id
      matrizpausa[10,RecNo-1] := Fields[15].AsString; //operacao conf id
      //matrizpausa[11,RecNo-1] := Fields[3].AsString;  //paus pos
      //matrizpausa[12,RecNo-1] := Fields[4].AsString;  //tempo pos (sec)
      //matrizpausa[13,RecNo-1] := Fields[5].AsString;  // tempo pos
      matrizpausa[14,RecNo-1] := Fields[6].AsString;  //ativo em pausa
      matrizpausa[15,RecNo-1] := Fields[16].AsString;  //duracao_min_act
      matrizpausa[16,RecNo-1] := Fields[17].AsString;  //duracao_min_valor
      matrizpausa[17,RecNo-1] := Fields[18].AsString;  //bloqueio_act

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaSites(albrowser: TActionList; tabCliente: TsTabSheet);
begin

  with datam.qr_carrega_sites do
  begin
    if Active then Close;
    Open;

    setlength(matrizurl, 3, RecordCount);

    First;
    while not Eof do
    begin

      matrizurl[0, RecNo-1] := Fields[0].AsString;
      matrizurl[1, RecNo-1] := Fields[1].AsString;
      matrizurl[2, RecNo-1] := Fields[2].AsString;


      if Fields[1].AsString = 'True' then
      begin
        TAction(albrowser.Actions[Recno-1]).Enabled := True;
      end
      else
      begin
        if (Recno-1 <> 0) and (Recno-1 <> 8) and (Recno-1 <> 10) then
          TAction(albrowser.Actions[Recno-1]).Enabled := False;

        if Recno-1 = 0 then
          tabCliente.Tag := -1;
      end;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaXFerConsulta;
begin

  with datam.qr_carrega_xfer_consulta do
  begin
    if Active then Close;
    Open;

    setlength(matrizxferconsulta, 2, RecordCount);

    First;
    while not Eof do
    begin

      matrizxferconsulta[0, RecNo-1] := Fields[0].AsString;
      matrizxferconsulta[1, RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;
procedure TSQL.CarregaXFerPesquisa;
begin

  with datam.qr_carrega_xfer_pesquisa do
  begin
    if Active then Close;
    Open;

    setlength(matrizxferpesquisa , 2, RecordCount);

    First;
    while not Eof do
    begin

      matrizxferpesquisa[0,RecNo-1] := Fields[0].AsString;
      matrizxferpesquisa[1,RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaXFerRamal;
begin

  with datam.qr_carrega_pausa do
  begin
    if Active then Close;
    Open;

    setlength(matrizxferramal, 2, RecordCount);

    First;
    while not Eof do
    begin

      matrizxferramal[0,RecNo-1] := Fields[0].AsString;
      matrizxferramal[1,RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;


end;

procedure TSQL.CarregaXFerURA;
begin

  with datam.qr_carrega_pausa do
  begin
    if Active then Close;
    Open;

    setlength(matrizxferura, 2, RecordCount);

    First;
    while not Eof do
    begin

      matrizxferura[0,RecNo-1] := Fields[0].AsString;
      matrizxferura[1,RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaXFerVirtual;
begin

  with datam.qr_carrega_xfer_virtual do
  begin
    if Active then Close;
    Open;

    setlength(matrizxfervirtual, 2, RecordCount);

    First;
    while not Eof do
    begin

      matrizxfervirtual[0, RecNo-1] := FormatFloat('00000', Fields[0].AsInteger);
      matrizxfervirtual[1, RecNo-1] := Fields[1].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.SetChatFilaIn(const Value: String);
begin
  FChatFilaIn := Value;
end;

procedure TSQL.SetsRespChatIn(const Value: String);
begin
  FsRespChatIn := Value;
end;


procedure TSQL.SetsVNumPausa(const Value: Integer);
begin
  FsVNumPausa := Value;
end;

procedure TSQL.CarregaChatTrans(mitChatXFer: TMenuItem; mnuChatMoreOptions: TPopupMenu; OnClick : TNotifyEvent );
begin

  if Assigned(mitChatXFer) then mitChatXFer.Clear;
  with datam.qryChatCarregaTrans do
  begin
    if Active then Close;
    Open;

    First;
    while not Eof do
    begin
      mitChatXFerAssunto[RecNo-1]         := TMenuItem.Create(mnuChatMoreOptions);
      mitChatXFerAssunto[RecNo-1].Caption := matrizchatassunto[1, RecNo-1];
      mitChatXFerAssunto[RecNo-1].OnClick := OnClick;
      mitChatXFerAssunto[RecNo-1].Tag     := StrToInt(matrizchatassunto[0, RecNo-1]);

      Next;
    end;

    Close;
  end;


end;

procedure TSQL.CarregaClassFila;
begin

  with datam.qry_carrega_class_fila do
  begin
    if Active then Close;
    Open;

    setlength(matrizclassifica_fila, 3, RecordCount);


    First;
    while not Eof do
    begin
      matrizclassifica_fila[0,RecNo-1] := Fields[0].AsString;
      matrizclassifica_fila[1,RecNo-1] := Fields[1].AsString;
      matrizclassifica_fila[2,RecNo-1] := Fields[2].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaClassFilaSub;
begin

  with datam.qry_carrega_class_fila_sub do
  begin
    if Active then Close;
    Open;

    setlength(matrizclassificasub_fila, 6, RecordCount);

    First;
    while not Eof do
    begin

      matrizclassificasub_fila[0,RecNo-1] := Fields[0].AsString;
      matrizclassificasub_fila[1,RecNo-1] := Fields[1].AsString;
      matrizclassificasub_fila[2,RecNo-1] := Fields[2].AsString;
      matrizclassificasub_fila[3,RecNo-1] := Fields[3].AsString;
      matrizclassificasub_fila[4,RecNo-1] := Fields[4].AsString;
      matrizclassificasub_fila[5,RecNo-1] := Fields[5].AsString;

      Next;
    end;

    Close;
  end;

end;

procedure TSQL.CarregaCoaching;
begin
  with datam.qryCarregaCoaching do
  begin
    if Active then Close;
    Open;

    setlength(matrizcoaching, 2, RecordCount);


    First;
    while not Eof do
    begin
      matrizcoaching[0,RecNo-1] := Fields[0].AsString;
      matrizcoaching[1,RecNo-1] := Fields[1].AsString;
      Next;
    end;

    Close;
  end;

end;

{ TProcesso }

procedure TProcesso.Conferencia;
  Var ind    : Integer;
      indSub : Integer;
begin

  if TMyInfoLogin.bConferencia then
  begin
    if datam.qryConferencia.Active then datam.qryConferencia.Close;
    datam.qryConferencia.Open;

    TMyConfCallClass.nQtdConfCall := datam.qryConferencia.RecordCount;
    SetLength(TMyConfCallClass.matrizConfCall, TMyConfCallClass.nQtdConfCall, 3);

    if TMyConfCallClass.nQtdConfCall > 0 then
    begin
      frmPrincipal.cmdConferencia.Enabled := True;
      frmPrincipal.cmdExecConf.Enabled    := False;
      frmPrincipal.cmdCreateConf.Enabled  := False;
      frmPrincipal.cmdDestroyConf.Enabled := False;

      while not datam.qryConferencia.Eof do
      begin
        ind := datam.qryConferencia.RecNo-1;
        TMyConfCallClass.matrizConfCall[ind, 0] := datam.qryConferencia.Fields[0].AsString;
        TMyConfCallClass.matrizConfCall[ind, 1] := datam.qryConferencia.Fields[1].AsString;
        TMyConfCallClass.matrizConfCall[ind, 2] := datam.qryConferencia.Fields[2].AsString;

        if TMyConfCallClass.matrizConfCall[ind, 2] = 'S' then
        begin
          //easy_callcenter_agente_conferencia_has_supervisor
          //Numeros internos
          if datam.qryConferenciaTipoNInterno.Active then datam.qryConferenciaTipoNInterno.Close;
          datam.qryConferenciaTipoNInterno.Open;

          TMyConfCallClass.nQtdIntConfCall := datam.qryConferenciaTipoNInterno.RecordCount;
          SetLength(TMyConfCallClass.matrizIntConfCall, TMyConfCallClass.nQtdIntConfCall, 3);

          if TMyConfCallClass.nQtdIntConfCall > 0 then
          begin
            while not datam.qryConferenciaTipoNInterno.Eof do
            begin
              IndSub := datam.qryConferenciaTipoNInterno.RecNo-1;
              TMyConfCallClass.matrizIntConfCall[indSub, 0] := datam.qryConferenciaTipoNInterno.Fields[0].AsString;
              TMyConfCallClass.matrizIntConfCall[indSub, 1] := datam.qryConferenciaTipoNInterno.Fields[1].AsString;
              TMyConfCallClass.matrizIntConfCall[indSub, 2] := datam.qryConferenciaTipoNInterno.Fields[2].AsString;

              datam.qryConferenciaTipoNInterno.Next;
            end;
          end;
        end;

        if TMyConfCallClass.matrizConfCall[ind, 2] = 'N' then
        begin
          //easy_callcenter_agente_conferencia_has_numeros
          //Numeros externos
          if datam.qryConferenciaTipoNExterno.Active then datam.qryConferenciaTipoNExterno.Close;
          datam.qryConferenciaTipoNExterno.Open;

          TMyConfCallClass.nQtdExtConfCall := datam.qryConferenciaTipoNExterno.RecordCount;
          SetLength(TMyConfCallClass.matrizExtConfCall, TMyConfCallClass.nQtdExtConfCall, 4);

          if TMyConfCallClass.nQtdExtConfCall > 0 then
          begin
            while not datam.qryConferenciaTipoNExterno.Eof do
            begin
              IndSub := datam.qryConferenciaTipoNExterno.RecNo-1;
              TMyConfCallClass.matrizExtConfCall[indSub, 0] := datam.qryConferenciaTipoNExterno.Fields[0].AsString;
              TMyConfCallClass.matrizExtConfCall[indSub, 1] := datam.qryConferenciaTipoNExterno.Fields[1].AsString;
              TMyConfCallClass.matrizExtConfCall[indSub, 2] := datam.qryConferenciaTipoNExterno.Fields[2].AsString;
              TMyConfCallClass.matrizExtConfCall[indSub, 3] := datam.qryConferenciaTipoNExterno.Fields[3].AsString;

              datam.qryConferenciaTipoNExterno.Next;
            end;
          end;
        end;

        datam.qryConferencia.Next;
      end;

      datam.qryConferencia.Close;
      datam.qryConferenciaTipoNInterno.Close;
      datam.qryConferenciaTipoNExterno.Close;
    end; //if TMyConfCallClass.nQtdConfCall > 0 then

    frmPrincipal.cboConfCallFilter.Items.Clear;
    frmPrincipal.cboConfCallFilter.Items.Add('Interno');
    frmPrincipal.cboConfCallFilter.Items.Add('Externo');

    frmPrincipal.txtConfCallFind.Enabled := False;
    frmPrincipal.txtConfCallFind.Text := '';

    frmPrincipal.lstConfCallFind.Items.Clear;
    frmPrincipal.lstConfCallFind.Visible := False;
    try
      frmPrincipal.lstConfCallFind.Repaint;
      frmPrincipal.lstConfCallFind.Refresh;
    except end;
  end;
end;

end.

