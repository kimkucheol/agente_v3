unit uAgente;
interface
  Uses Windows, IpHlpApi, IpTypes, IpIfConst, inifiles, Classes, SysUtils, Dialogs;

  procedure GetIPInfo(Stream :TMemoryStream); stdcall;

implementation

procedure GetIPInfo(Stream :TMemoryStream); stdcall;
var
  FixedInfoSize, Err, AdapterInfoSize:DWORD;
  pFixedInfo:PFIXED_INFO;
  pAdapterInfo, pAdapt:PIP_ADAPTER_INFO;
  pAddrStr:PIP_ADDR_STRING;
  Lista : TStringList;
begin

  Lista := TStringList.Create;
  FixedInfoSize:=0;

  pFixedInfo:=PFIXED_INFO(GlobalAlloc(GPTR, FixedInfoSize));
  GetNetworkParams(pFixedInfo, FixedInfoSize);

  //Get Adapter Info
  AdapterInfoSize:=0;
  Err:=GetAdaptersInfo(nil, AdapterInfoSize);

  ShowMessage('03');
  if (Err<>0) and (Err<>ERROR_BUFFER_OVERFLOW) then
  begin
    Lista.Add('Error');
    exit;
  end;

  pAdapterInfo := PIP_ADAPTER_INFO(GlobalAlloc(GPTR, AdapterInfoSize));
  GetAdaptersInfo(pAdapterInfo, AdapterInfoSize);
  pAdapt := pAdapterInfo;

  while pAdapt<>nil do
  begin
    case pAdapt.Type_ of
      MIB_IF_TYPE_ETHERNET:
        Lista.Add('Ethernet adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_TOKENRING:
        Lista.Add('Token Ring adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_FDDI:
        Lista.Add('FDDI adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_PPP:
        Lista.Add('PPP adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_LOOPBACK:
        Lista.Add('Loopback adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_SLIP:
        Lista.Add('Slip adapter '+pAdapt.AdapterName);
      MIB_IF_TYPE_OTHER:
        Lista.Add('Other adapter '+pAdapt.AdapterName);
    end;
    pAdapt := pAdapt.Next;
  end;

  Lista.SaveToStream(Stream);

  GlobalFree(Cardinal(pFixedInfo));
end;

end.
